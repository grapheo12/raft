// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft_msg.proto

package rpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogEntry struct {
	Msg                  []byte   `protobuf:"bytes,1,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Term                 int32    `protobuf:"varint,2,opt,name=Term,proto3" json:"Term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6e20b425035dac, []int{0}
}
func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return m.Size()
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *LogEntry) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

type VoteRequestMsg struct {
	CandidateId          int32    `protobuf:"varint,1,opt,name=CandidateId,proto3" json:"CandidateId,omitempty"`
	CandidateTerm        int32    `protobuf:"varint,2,opt,name=CandidateTerm,proto3" json:"CandidateTerm,omitempty"`
	CandidateLogLen      int32    `protobuf:"varint,3,opt,name=CandidateLogLen,proto3" json:"CandidateLogLen,omitempty"`
	CandidateLogTerm     int32    `protobuf:"varint,4,opt,name=CandidateLogTerm,proto3" json:"CandidateLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteRequestMsg) Reset()         { *m = VoteRequestMsg{} }
func (m *VoteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*VoteRequestMsg) ProtoMessage()    {}
func (*VoteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6e20b425035dac, []int{1}
}
func (m *VoteRequestMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteRequestMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteRequestMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteRequestMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteRequestMsg.Merge(m, src)
}
func (m *VoteRequestMsg) XXX_Size() int {
	return m.Size()
}
func (m *VoteRequestMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteRequestMsg.DiscardUnknown(m)
}

var xxx_messageInfo_VoteRequestMsg proto.InternalMessageInfo

func (m *VoteRequestMsg) GetCandidateId() int32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *VoteRequestMsg) GetCandidateTerm() int32 {
	if m != nil {
		return m.CandidateTerm
	}
	return 0
}

func (m *VoteRequestMsg) GetCandidateLogLen() int32 {
	if m != nil {
		return m.CandidateLogLen
	}
	return 0
}

func (m *VoteRequestMsg) GetCandidateLogTerm() int32 {
	if m != nil {
		return m.CandidateLogTerm
	}
	return 0
}

type VoteResponseMsg struct {
	VoterId              int32    `protobuf:"varint,1,opt,name=VoterId,proto3" json:"VoterId,omitempty"`
	VoterTerm            int32    `protobuf:"varint,2,opt,name=VoterTerm,proto3" json:"VoterTerm,omitempty"`
	Granted              bool     `protobuf:"varint,3,opt,name=Granted,proto3" json:"Granted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteResponseMsg) Reset()         { *m = VoteResponseMsg{} }
func (m *VoteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*VoteResponseMsg) ProtoMessage()    {}
func (*VoteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6e20b425035dac, []int{2}
}
func (m *VoteResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteResponseMsg.Merge(m, src)
}
func (m *VoteResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *VoteResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_VoteResponseMsg proto.InternalMessageInfo

func (m *VoteResponseMsg) GetVoterId() int32 {
	if m != nil {
		return m.VoterId
	}
	return 0
}

func (m *VoteResponseMsg) GetVoterTerm() int32 {
	if m != nil {
		return m.VoterTerm
	}
	return 0
}

func (m *VoteResponseMsg) GetGranted() bool {
	if m != nil {
		return m.Granted
	}
	return false
}

type LogRequestMsg struct {
	LeaderId             int32       `protobuf:"varint,1,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	LeaderTerm           int32       `protobuf:"varint,2,opt,name=LeaderTerm,proto3" json:"LeaderTerm,omitempty"`
	PrefixLen            int32       `protobuf:"varint,3,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	PrefixTerm           int32       `protobuf:"varint,4,opt,name=PrefixTerm,proto3" json:"PrefixTerm,omitempty"`
	CommitLen            int32       `protobuf:"varint,5,opt,name=CommitLen,proto3" json:"CommitLen,omitempty"`
	Suffix               []*LogEntry `protobuf:"bytes,6,rep,name=Suffix,proto3" json:"Suffix,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LogRequestMsg) Reset()         { *m = LogRequestMsg{} }
func (m *LogRequestMsg) String() string { return proto.CompactTextString(m) }
func (*LogRequestMsg) ProtoMessage()    {}
func (*LogRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6e20b425035dac, []int{3}
}
func (m *LogRequestMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRequestMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRequestMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRequestMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequestMsg.Merge(m, src)
}
func (m *LogRequestMsg) XXX_Size() int {
	return m.Size()
}
func (m *LogRequestMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequestMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequestMsg proto.InternalMessageInfo

func (m *LogRequestMsg) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *LogRequestMsg) GetLeaderTerm() int32 {
	if m != nil {
		return m.LeaderTerm
	}
	return 0
}

func (m *LogRequestMsg) GetPrefixLen() int32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *LogRequestMsg) GetPrefixTerm() int32 {
	if m != nil {
		return m.PrefixTerm
	}
	return 0
}

func (m *LogRequestMsg) GetCommitLen() int32 {
	if m != nil {
		return m.CommitLen
	}
	return 0
}

func (m *LogRequestMsg) GetSuffix() []*LogEntry {
	if m != nil {
		return m.Suffix
	}
	return nil
}

type LogResponseMsg struct {
	FollowerId           int32    `protobuf:"varint,1,opt,name=FollowerId,proto3" json:"FollowerId,omitempty"`
	FollowerTerm         int32    `protobuf:"varint,2,opt,name=FollowerTerm,proto3" json:"FollowerTerm,omitempty"`
	LogCommitAck         int32    `protobuf:"varint,3,opt,name=LogCommitAck,proto3" json:"LogCommitAck,omitempty"`
	LogCommitSuccess     bool     `protobuf:"varint,4,opt,name=LogCommitSuccess,proto3" json:"LogCommitSuccess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResponseMsg) Reset()         { *m = LogResponseMsg{} }
func (m *LogResponseMsg) String() string { return proto.CompactTextString(m) }
func (*LogResponseMsg) ProtoMessage()    {}
func (*LogResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6e20b425035dac, []int{4}
}
func (m *LogResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponseMsg.Merge(m, src)
}
func (m *LogResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *LogResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponseMsg proto.InternalMessageInfo

func (m *LogResponseMsg) GetFollowerId() int32 {
	if m != nil {
		return m.FollowerId
	}
	return 0
}

func (m *LogResponseMsg) GetFollowerTerm() int32 {
	if m != nil {
		return m.FollowerTerm
	}
	return 0
}

func (m *LogResponseMsg) GetLogCommitAck() int32 {
	if m != nil {
		return m.LogCommitAck
	}
	return 0
}

func (m *LogResponseMsg) GetLogCommitSuccess() bool {
	if m != nil {
		return m.LogCommitSuccess
	}
	return false
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "rpc.LogEntry")
	proto.RegisterType((*VoteRequestMsg)(nil), "rpc.VoteRequestMsg")
	proto.RegisterType((*VoteResponseMsg)(nil), "rpc.VoteResponseMsg")
	proto.RegisterType((*LogRequestMsg)(nil), "rpc.LogRequestMsg")
	proto.RegisterType((*LogResponseMsg)(nil), "rpc.LogResponseMsg")
}

func init() { proto.RegisterFile("raft_msg.proto", fileDescriptor_5a6e20b425035dac) }

var fileDescriptor_5a6e20b425035dac = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x8d, 0xdd, 0x66, 0x3d, 0xfb, 0x4b, 0xae, 0x8a, 0x48, 0x29, 0x45, 0xa1, 0x78, 0x31,
	0x44, 0x9f, 0x40, 0x87, 0x8a, 0x50, 0x41, 0x3a, 0xf1, 0x56, 0x6a, 0x9b, 0x96, 0xe2, 0xda, 0xd4,
	0x34, 0xc3, 0xf9, 0x26, 0x3e, 0x80, 0xd7, 0x3e, 0x87, 0x57, 0xe2, 0x23, 0xc8, 0x7c, 0x11, 0x49,
	0xba, 0xb6, 0x99, 0xbb, 0x3b, 0xdf, 0xaf, 0xe7, 0x24, 0xdf, 0x77, 0x1a, 0x18, 0x30, 0x3f, 0xe2,
	0x0f, 0x69, 0x11, 0x8f, 0x73, 0x46, 0x39, 0xc5, 0x1a, 0xcb, 0x03, 0xfb, 0x18, 0x74, 0x97, 0xc6,
	0x17, 0x19, 0x67, 0xaf, 0x78, 0x04, 0xda, 0x4d, 0x11, 0x1b, 0xc8, 0x42, 0x4e, 0xcf, 0x13, 0x25,
	0xc6, 0xd0, 0xba, 0x23, 0x2c, 0x35, 0xb6, 0x2d, 0xe4, 0xb4, 0x3d, 0x59, 0xdb, 0x1f, 0x08, 0x06,
	0xf7, 0x94, 0x13, 0x8f, 0x3c, 0xcf, 0x49, 0xc1, 0x45, 0x9b, 0x05, 0xdd, 0x89, 0x9f, 0x85, 0x49,
	0xe8, 0x73, 0x72, 0x1d, 0xca, 0x03, 0xda, 0x9e, 0x8a, 0xf0, 0x01, 0xf4, 0x6b, 0xa9, 0x9c, 0xb8,
	0x0e, 0xb1, 0x03, 0xc3, 0x1a, 0xb8, 0x34, 0x76, 0x49, 0x66, 0x68, 0xb2, 0xef, 0x3f, 0xc6, 0x47,
	0x30, 0x52, 0x91, 0x3c, 0xb2, 0x25, 0x5b, 0x37, 0xb8, 0x1d, 0xc0, 0xb0, 0xf4, 0x5b, 0xe4, 0x34,
	0x2b, 0x88, 0x30, 0x6c, 0xc0, 0x8e, 0x40, 0xac, 0x36, 0x5b, 0x49, 0xbc, 0x0f, 0xbb, 0xb2, 0x54,
	0x4c, 0x36, 0x40, 0xcc, 0x5d, 0x31, 0x3f, 0xe3, 0x24, 0x94, 0xc6, 0x74, 0xaf, 0x92, 0xf6, 0x17,
	0x82, 0xbe, 0x4b, 0x63, 0x65, 0x29, 0x7b, 0xa0, 0xbb, 0xc4, 0x0f, 0x95, 0x4b, 0x6a, 0x8d, 0x4d,
	0x80, 0xb2, 0x56, 0xae, 0x51, 0x88, 0x70, 0x71, 0xcb, 0x48, 0x94, 0x2c, 0x9a, 0x15, 0x34, 0x40,
	0x4c, 0x97, 0x42, 0x89, 0xad, 0x10, 0x31, 0x3d, 0xa1, 0x69, 0x9a, 0x70, 0x31, 0xdd, 0x2e, 0xa7,
	0x6b, 0x80, 0x0f, 0xa1, 0x33, 0x9d, 0x47, 0x51, 0xb2, 0x30, 0x3a, 0x96, 0xe6, 0x74, 0x4f, 0xfa,
	0x63, 0x96, 0x07, 0xe3, 0xea, 0x11, 0x78, 0xab, 0x8f, 0xf6, 0x3b, 0x82, 0x81, 0x0c, 0xd4, 0x6c,
	0xcd, 0x04, 0xb8, 0xa4, 0xb3, 0x19, 0x7d, 0x51, 0x32, 0x29, 0x04, 0xdb, 0xd0, 0xab, 0x94, 0x92,
	0x6b, 0x8d, 0x89, 0x1e, 0x97, 0xc6, 0xa5, 0x9b, 0xb3, 0xe0, 0x69, 0x15, 0x6e, 0x8d, 0x89, 0x9f,
	0x5b, 0xeb, 0xe9, 0x3c, 0x08, 0x48, 0x51, 0xc8, 0x94, 0xba, 0xb7, 0xc1, 0xcf, 0x47, 0x9f, 0x4b,
	0x13, 0x7d, 0x2f, 0x4d, 0xf4, 0xb3, 0x34, 0xd1, 0xdb, 0xaf, 0xb9, 0xf5, 0xd8, 0x91, 0xaf, 0xfb,
	0xf4, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x4c, 0xe9, 0x3b, 0xef, 0x02, 0x00, 0x00,
}

func (m *LogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Term != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintRaftMsg(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteRequestMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CandidateLogTerm != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.CandidateLogTerm))
		i--
		dAtA[i] = 0x20
	}
	if m.CandidateLogLen != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.CandidateLogLen))
		i--
		dAtA[i] = 0x18
	}
	if m.CandidateTerm != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.CandidateTerm))
		i--
		dAtA[i] = 0x10
	}
	if m.CandidateId != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.CandidateId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Granted {
		i--
		if m.Granted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.VoterTerm != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.VoterTerm))
		i--
		dAtA[i] = 0x10
	}
	if m.VoterId != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.VoterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRequestMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Suffix) > 0 {
		for iNdEx := len(m.Suffix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Suffix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.CommitLen != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.CommitLen))
		i--
		dAtA[i] = 0x28
	}
	if m.PrefixTerm != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.PrefixTerm))
		i--
		dAtA[i] = 0x20
	}
	if m.PrefixLen != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.PrefixLen))
		i--
		dAtA[i] = 0x18
	}
	if m.LeaderTerm != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.LeaderTerm))
		i--
		dAtA[i] = 0x10
	}
	if m.LeaderId != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.LeaderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogCommitSuccess {
		i--
		if m.LogCommitSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LogCommitAck != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.LogCommitAck))
		i--
		dAtA[i] = 0x18
	}
	if m.FollowerTerm != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.FollowerTerm))
		i--
		dAtA[i] = 0x10
	}
	if m.FollowerId != 0 {
		i = encodeVarintRaftMsg(dAtA, i, uint64(m.FollowerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaftMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRaftMsg(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovRaftMsg(uint64(m.Term))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteRequestMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CandidateId != 0 {
		n += 1 + sovRaftMsg(uint64(m.CandidateId))
	}
	if m.CandidateTerm != 0 {
		n += 1 + sovRaftMsg(uint64(m.CandidateTerm))
	}
	if m.CandidateLogLen != 0 {
		n += 1 + sovRaftMsg(uint64(m.CandidateLogLen))
	}
	if m.CandidateLogTerm != 0 {
		n += 1 + sovRaftMsg(uint64(m.CandidateLogTerm))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoterId != 0 {
		n += 1 + sovRaftMsg(uint64(m.VoterId))
	}
	if m.VoterTerm != 0 {
		n += 1 + sovRaftMsg(uint64(m.VoterTerm))
	}
	if m.Granted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogRequestMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaderId != 0 {
		n += 1 + sovRaftMsg(uint64(m.LeaderId))
	}
	if m.LeaderTerm != 0 {
		n += 1 + sovRaftMsg(uint64(m.LeaderTerm))
	}
	if m.PrefixLen != 0 {
		n += 1 + sovRaftMsg(uint64(m.PrefixLen))
	}
	if m.PrefixTerm != 0 {
		n += 1 + sovRaftMsg(uint64(m.PrefixTerm))
	}
	if m.CommitLen != 0 {
		n += 1 + sovRaftMsg(uint64(m.CommitLen))
	}
	if len(m.Suffix) > 0 {
		for _, e := range m.Suffix {
			l = e.Size()
			n += 1 + l + sovRaftMsg(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FollowerId != 0 {
		n += 1 + sovRaftMsg(uint64(m.FollowerId))
	}
	if m.FollowerTerm != 0 {
		n += 1 + sovRaftMsg(uint64(m.FollowerTerm))
	}
	if m.LogCommitAck != 0 {
		n += 1 + sovRaftMsg(uint64(m.LogCommitAck))
	}
	if m.LogCommitSuccess {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftMsg(x uint64) (n int) {
	return sovRaftMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateId", wireType)
			}
			m.CandidateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CandidateId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateTerm", wireType)
			}
			m.CandidateTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CandidateTerm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateLogLen", wireType)
			}
			m.CandidateLogLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CandidateLogLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateLogTerm", wireType)
			}
			m.CandidateLogTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CandidateLogTerm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			m.VoterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoterId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterTerm", wireType)
			}
			m.VoterTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoterTerm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Granted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			m.LeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderTerm", wireType)
			}
			m.LeaderTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderTerm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLen", wireType)
			}
			m.PrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixTerm", wireType)
			}
			m.PrefixTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixTerm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitLen", wireType)
			}
			m.CommitLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = append(m.Suffix, &LogEntry{})
			if err := m.Suffix[len(m.Suffix)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowerId", wireType)
			}
			m.FollowerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowerTerm", wireType)
			}
			m.FollowerTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowerTerm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogCommitAck", wireType)
			}
			m.LogCommitAck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogCommitAck |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogCommitSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogCommitSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftMsg = fmt.Errorf("proto: unexpected end of group")
)
